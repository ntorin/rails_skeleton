'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sinon = require('sinon');

var _enzyme = require('enzyme');

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mouseMove = function mouseMove(x, y) {
  var event = document.createEvent('MouseEvents');
  event.initMouseEvent('mousemove', true, true, window, 0, 0, 0, x, y, false, false, false, false, 0, null);
  document.dispatchEvent(event);
  return event;
};

var mouseUp = function mouseUp(x, y) {
  var event = document.createEvent('MouseEvents');
  event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, x, y, false, false, false, false, 0, null);
  document.dispatchEvent(event);
  return event;
};

(0, _ava2.default)('should throw error without props', function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(t) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            t.throws(function () {
              return (0, _enzyme.mount)(_react2.default.createElement(_2.default, null));
            });

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

/*
test('should mount', async (t) => {
  const rnd = mount(
    <Rnd default={{ x: 100, y: 100, width: 100, height: 100 }} />,
  );
  t.true(!!rnd);
});

test('should call onDragStart when start dragging', async (t) => {
  const onDragStart = spy();
  const rnd = mount(
    <Rnd
      default={{ x: 100, y: 100, width: 100, height: 100 }}
      onDragStart={onDragStart}
    />,
  );
  rnd.find('div').at(0).simulate('mousedown');
  t.is(onDragStart.callCount, 1);
  t.is(onDragStart.firstCall.args[0].type, 'mousedown');
  t.is(onDragStart.firstCall.args[1].x, 100);
  t.is(onDragStart.firstCall.args[1].y, 100);
});

test('should call onDrag when dragging', async (t) => {
  const onDrag = spy();
  const rnd = mount(
    <Rnd
      default={{ x: 100, y: 100, width: 100, height: 100 }}
      onDrag={onDrag}
    />,
  );
  rnd.find('div').at(0).simulate('mousedown');
  mouseMove(200, 220);
  mouseUp(100, 120);
  t.is(onDrag.callCount, 1);
});

test('should call onDragStop when drag stop', async (t) => {
  const onDragStop = spy();
  const rnd = mount(
    <Rnd
      default={{ x: 100, y: 100, width: 100, height: 100 }}
      onDragStop={onDragStop}
    />,
  );
  rnd.find('div').at(0).simulate('mousedown');
  mouseMove(200, 220);
  mouseUp(100, 120);
  t.is(onDragStop.callCount, 1);
});

*/